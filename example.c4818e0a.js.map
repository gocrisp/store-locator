{"version":3,"sources":["../src/index.ts","../node_modules/fast-deep-equal/index.js","index.ts"],"names":["isEqual"],"mappings":"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","file":"example.c4818e0a.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport isEqual from \"fast-deep-equal\";\n\n/**\n * @ignore\n */\ndeclare global {\n  interface Window {\n    __googleMapsCallback: (e: Event) => void;\n  }\n}\n\nexport const DEFAULT_ID = \"__googleMapsScriptId\";\n\ntype Libraries = (\n  | \"drawing\"\n  | \"geometry\"\n  | \"localContext\"\n  | \"places\"\n  | \"visualization\"\n)[];\n\n/**\n * The Google Maps JavaScript API\n * [documentation](https://developers.google.com/maps/documentation/javascript/tutorial)\n * is the authoritative source for [[LoaderOptions]].\n/**\n * Loader options\n */\nexport interface LoaderOptions {\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/get-api-key.\n   */\n  apiKey: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview.\n   */\n  channel?: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview, use `apiKey` instead.\n   */\n  client?: string;\n  /**\n   * In your application you can specify release channels or version numbers:\n   *\n   * The weekly version is specified with `version=weekly`. This version is\n   * updated once per week, and is the most current.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly'});\n   * ```\n   *\n   * The quarterly version is specified with `version=quarterly`. This version\n   * is updated once per quarter, and is the most predictable.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'quarterly'});\n   * ```\n   *\n   * The version number is specified with `version=n.nn`. You can choose\n   * `version=3.40`, `version=3.39`, or `version=3.38`. Version numbers are\n   * updated once per quarter.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: '3.40'});\n   * ```\n   *\n   * If you do not explicitly specify a version, you will receive the\n   * weekly version by default.\n   */\n  version?: string;\n  /**\n   * The id of the script tag. Before adding a new script, the Loader will check for an existing one.\n   */\n  id?: string;\n  /**\n   * When loading the Maps JavaScript API via the URL you may optionally load\n   * additional libraries through use of the libraries URL parameter. Libraries\n   * are modules of code that provide additional functionality to the main Maps\n   * JavaScript API but are not loaded unless you specifically request them.\n   *\n   * ```\n   * const loader = Loader({\n   *  apiKey,\n   *  libraries: ['drawing', 'geometry', 'places', 'visualization'],\n   * });\n   * ```\n   *\n   * Set the [list of libraries](https://developers.google.com/maps/documentation/javascript/libraries) for more options.\n   */\n  libraries?: Libraries;\n  /**\n   * By default, the Maps JavaScript API uses the user's preferred language\n   * setting as specified in the browser, when displaying textual information\n   * such as the names for controls, copyright notices, driving directions and\n   * labels on maps. In most cases, it's preferable to respect the browser\n   * setting. However, if you want the Maps JavaScript API to ignore the\n   * browser's language setting, you can force it to display information in a\n   * particular language when loading the Maps JavaScript API code.\n   *\n   * For example, the following example localizes the language to Japan:\n   *\n   * ```\n   * const loader = Loader({apiKey, language: 'ja', region: 'JP'});\n   * ```\n   *\n   * See the [list of supported\n   * languages](https://developers.google.com/maps/faq#languagesupport). Note\n   * that new languages are added often, so this list may not be exhaustive.\n   *\n   */\n  language?: string;\n  /**\n   * When you load the Maps JavaScript API from maps.googleapis.com it applies a\n   * default bias for application behavior towards the United States. If you\n   * want to alter your application to serve different map tiles or bias the\n   * application (such as biasing geocoding results towards the region), you can\n   * override this default behavior by adding a region parameter when loading\n   * the Maps JavaScript API code.\n   *\n   * The region parameter accepts Unicode region subtag identifiers which\n   * (generally) have a one-to-one mapping to country code Top-Level Domains\n   * (ccTLDs). Most Unicode region identifiers are identical to ISO 3166-1\n   * codes, with some notable exceptions. For example, Great Britain's ccTLD is\n   * \"uk\" (corresponding to the domain .co.uk) while its region identifier is\n   * \"GB.\"\n   *\n   * For example, the following example localizes the map to the United Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, region: 'GB'});\n   * ```\n   */\n  region?: string;\n  /**\n   * (Beta) You can add multiple Map IDs to your map using the map_ids paramenter in\n   * your bootstrap request.\n   */\n  mapIds?: string[];\n  /**\n   * Use a custom url and path to load the Google Maps API script.\n   */\n  url?: string;\n  /**\n   * Use a cryptographic nonce attribute.\n   */\n  nonce?: string;\n  /**\n   * The number of script load retries.\n   */\n  retries?: number;\n}\n\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then(() => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nexport class Loader {\n  /**\n   * See [[LoaderOptions.version]]\n   */\n  version: string;\n  /**\n   * See [[LoaderOptions.apiKey]]\n   */\n  apiKey: string;\n  /**\n   * See [[LoaderOptions.channel]]\n   */\n  channel: string;\n  /**\n   * See [[LoaderOptions.client]]\n   */\n  client: string;\n  /**\n   * See [[LoaderOptions.id]]\n   */\n  id: string;\n  /**\n   * See [[LoaderOptions.libraries]]\n   */\n  libraries: Libraries;\n  /**\n   * See [[LoaderOptions.language]]\n   */\n  language: string;\n\n  /**\n   * See [[LoaderOptions.region]]\n   */\n  region: string;\n\n  /**\n   * See [[LoaderOptions.mapIds]]\n   */\n  mapIds: string[];\n\n  /**\n   * See [[LoaderOptions.nonce]]\n   */\n  nonce: string | null;\n\n  /**\n   * See [[LoaderOptions.retries]]\n   */\n  retries: number;\n\n  /**\n   * See [[LoaderOptions.url]]\n   */\n  url: string;\n\n  private CALLBACK = \"__googleMapsCallback\";\n  private callbacks: ((e: Event) => void)[] = [];\n  private done = false;\n  private loading = false;\n  private onerrorEvent: Event;\n  private static instance: Loader;\n  private errors: ErrorEvent[] = [];\n\n  /**\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n   * using this library, instead the defaults are set by the Google Maps\n   * JavaScript API server.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n   * ```\n   */\n  constructor({\n    apiKey,\n    channel,\n    client,\n    id = DEFAULT_ID,\n    libraries = [],\n    language,\n    region,\n    version,\n    mapIds,\n    nonce,\n    retries = 3,\n    url = \"https://maps.googleapis.com/maps/api/js\",\n  }: LoaderOptions) {\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.client = client;\n    this.id = id || DEFAULT_ID; // Do not allow empty string\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.retries = retries;\n    this.url = url;\n\n    if (Loader.instance) {\n      if (!isEqual(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        );\n      }\n\n      return Loader.instance;\n    }\n\n    Loader.instance = this;\n  }\n\n  get options(): LoaderOptions {\n    return {\n      version: this.version,\n      apiKey: this.apiKey,\n      channel: this.channel,\n      client: this.client,\n      id: this.id,\n      libraries: this.libraries,\n      language: this.language,\n      region: this.region,\n      mapIds: this.mapIds,\n      nonce: this.nonce,\n      url: this.url,\n    };\n  }\n\n  /**\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n   *\n   * @ignore\n   */\n  createUrl(): string {\n    let url = this.url;\n\n    url += `?callback=${this.CALLBACK}`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n\n    if (this.client) {\n      url += `&client=${this.client}`;\n    }\n\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   */\n  load(): Promise<void> {\n    return this.loadPromise();\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   *\n   * @ignore\n   */\n  loadPromise(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err: Event) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script with a callback.\n   */\n  loadCallback(fn: (e: Event) => void): void {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n\n  /**\n   * Set the script on document.\n   */\n  private setScript(): void {\n    if (document.getElementById(this.id)) {\n      // TODO wrap onerror callback for cases where the script was loaded elsewhere\n      this.callback();\n      return;\n    }\n\n    const url = this.createUrl();\n    const script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n\n    document.head.appendChild(script);\n  }\n\n  deleteScript(): void {\n    const script = document.getElementById(this.id);\n    if (script) {\n      script.remove();\n    }\n  }\n\n  private resetIfRetryingFailed(): void {\n    const possibleAttempts = this.retries + 1;\n    if (this.done && !this.loading && this.errors.length >= possibleAttempts) {\n      this.deleteScript();\n      this.done = false;\n      this.loading = false;\n      this.errors = [];\n      this.onerrorEvent = null;\n    }\n  }\n\n  private loadErrorCallback(e: ErrorEvent): void {\n    this.errors.push(e);\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length;\n\n      console.log(\n        `Failed to load Google Maps script, retrying in ${delay} ms.`\n      );\n\n      setTimeout(() => {\n        this.deleteScript();\n        this.setScript();\n      }, delay);\n    } else {\n      this.onerrorEvent = e;\n      this.callback();\n    }\n  }\n\n  private setCallback(): void {\n    window.__googleMapsCallback = this.callback.bind(this);\n  }\n\n  private callback(): void {\n    this.done = true;\n    this.loading = false;\n\n    this.callbacks.forEach((cb) => {\n      cb(this.onerrorEvent);\n    });\n\n    this.callbacks = [];\n  }\n\n  private execute(): void {\n    if (window.google && window.google.maps && window.google.maps.version) {\n      console.warn(\n        \"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n          \"This may result in undesirable behavior as options and script parameters may not match.\"\n      );\n      this.callback();\n    }\n\n    this.resetIfRetryingFailed();\n    if (this.done) {\n      this.callback();\n    } else {\n      if (this.loading) {\n        // do nothing but wait\n      } else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  }\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import { Loader } from '@googlemaps/js-api-loader';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const loader = new Loader({\n    apiKey: 'AIzaSyDdH3QeHDu3XGXwcIF9sMHQmbn2YS4N4Kk',\n    version: 'weekly',\n  });\n\n  const container = document.getElementById('map-container');\n  if (container) {\n    return loader.load().then(() => {\n      const map = new google.maps.Map(container as HTMLElement, {\n        center: { lat: 39.8283, lng: -98.5795 },\n        zoom: 4,\n      });\n\n      const marker = new google.maps.Marker({\n        position: { lat: 34.397, lng: -80.644 },\n        map,\n      });\n\n      const infoWindow = new google.maps.InfoWindow({\n        content: '<p>Marker Location: ' + marker.getPosition() + '</p>',\n      });\n\n      google.maps.event.addListener(marker, 'click', () => infoWindow.open(map, marker));\n\n      return map;\n    });\n  }\n});\n"]}